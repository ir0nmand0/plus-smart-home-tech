server:
  # Порт, на котором запустится Config Server
  port: ${CONFIG_SERVER_PORT:8888}

spring:
  application:
    # Имя приложения, под которым Config Server будет регистрироваться
    # (также будет видно в Eureka)
    name: ${SPRING_APPLICATION_NAME:config-server}
  profiles:
    # Активируем профиль "native", чтобы брать конфигурации
    # из локальных директорий (classpath, filesystem и т.д.)
    active: ${SPRING_PROFILES_ACTIVE:native}
  cloud:
    config:
      server:
        native:
          # Список директорий, из которых читать конфиги
          searchLocations:
            # Инфраструктурные сервисы
            - classpath:config/infra/${APP_GATEWAY:gateway}
            # Сервисы телеметрии
            - classpath:config/telemetry/${APP_AGGREGATOR:aggregator}
            - classpath:config/telemetry/${APP_ANALYZER:analyzer}
            - classpath:config/telemetry/${APP_COLLECTOR:collector}
            # Сервисы commerce
            - classpath:config/commerce/${APP_SHOPPING_STORE:shopping-store}
            - classpath:config/commerce/${APP_SHOPPING_CART:shopping-cart}
            - classpath:config/commerce/${APP_WAREHOUSE:warehouse}

# Настройки Eureka, чтобы Config Server искал и регистрировался
eureka:
  client:
    serviceUrl:
      # Путь к Eureka Server
      defaultZone: ${EUREKA_URL:http://discovery-server:8761/eureka/}
    # Разрешаем регистрироваться (если хотим, чтобы Config Server отображался в Eureka)
    register-with-eureka: ${EUREKA_REGISTER:true}
    # Разрешаем получать реестр других сервисов (если нужно)
    fetch-registry: ${EUREKA_FETCH_REGISTRY:true}
  instance:
    # При регистрации использовать IP-адрес контейнера
    prefer-ip-address: ${EUREKA_PREFER_IP:true}
    # Интервал обновления аренды (по умолчанию 10 с)
    lease-renewal-interval-in-seconds: ${EUREKA_LEASE_RENEW:10}
    # Время до исключения из Eureka, если сервис не откликнулся (30 с)
    lease-expiration-duration-in-seconds: ${EUREKA_LEASE_EXPIRE:30}
