<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!--
    Родительский POM, от которого наследуются версии зависимостей и плагинов.
    Это важно для согласованности версий между модулями.
    -->
    <parent>
        <groupId>ru.yandex.practicum</groupId>
        <artifactId>codegen</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <!--
    Основные координаты модуля:
    - artifactId: уникальный идентификатор артефакта
    - packaging: тип упаковки (jar - библиотека)
    -->
    <artifactId>codegen-common</artifactId>
    <packaging>jar</packaging>

    <!--
    Зависимости проекта.
    Все версии управляются через родительский POM (отсюда их отсутствие здесь)
    -->
    <dependencies>
        <!-- Spring Boot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Swagger/OpenAPI -->
        <dependency>
            <groupId>io.swagger.core.v3</groupId>
            <artifactId>swagger-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>io.swagger.core.v3</groupId>
            <artifactId>swagger-models</artifactId>
        </dependency>

        <!-- Jakarta EE -->
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
        </dependency>

        <!-- Jackson -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
        </dependency>
    </dependencies>

    <!-- Конфигурация сборки проекта -->
    <build>
        <plugins>
            <!--
            OpenAPI Generator - генерирует Java классы из OpenAPI спецификации.
            Выполняется на фазе generate-sources.
            -->
            <plugin>
                <groupId>org.openapitools</groupId>
                <artifactId>openapi-generator-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>generate-common-models</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <!-- Путь к файлу спецификации относительно родительского POM -->
                            <inputSpec>${project.parent.basedir}/specs/common-schemas.json</inputSpec>
                            <generatorName>spring</generatorName>
                            <output>${project.build.directory}/generated-sources/openapi</output>
                            <modelPackage>ru.yandex.practicum.common.model</modelPackage>

                            <!--
                            В сгенерированном интерфейсе в проекте shopping-store-api при использовании
                            <typeMappings>
                            <typeMapping>Product=ru.yandex.practicum.common.model.ProductDto</typeMapping>
                            </typeMappings>
                            <importMappings>
                            <importMapping>Product=ru.yandex.practicum.common.model.ProductDto</importMapping>
                            </importMappings>
                            возвращаемый тип (response) корректно заменяется на
                            ru.yandex.practicum.common.model.ProductDto,
                            но параметр запроса (request body) остаётся с именем Product.
                            Использование vendor extension "x-java-type": "ru.yandex.practicum.common.model.ProductDto"
                            лишь дополнительно усложняет ситуацию,
                            поэтому принято решение отказаться от применения <modelNameSuffix>Dto</modelNameSuffix>
                            и переименовать модели непосредственно в спецификации для единообразия и упрощения поддержки кода.
                            -->

                            <!-- Настройки генерации кода -->
                            <configOptions>
                                <useLombok>false</useLombok>
                                <useSpringBoot3>true</useSpringBoot3>
                                <useJakartaEe>true</useJakartaEe>
                                <generateModels>true</generateModels>
                                <generateApis>false</generateApis>
                                <dateLibrary>${openapi.generator.java.dateLibrary}</dateLibrary>
                                <sourceFolder>src/main/java</sourceFolder>
                                <library>spring-boot</library>
                                <serializationLibrary>jackson</serializationLibrary>
                                <useBeanValidation>true</useBeanValidation>
                                <beanValidationModel>true</beanValidationModel>
                                <generateConstructorWithRequiredProperties>true</generateConstructorWithRequiredProperties>
                                <useOptional>false</useOptional>
                                <fieldGenerated>true</fieldGenerated>
                                <gettersAsAccessors>false</gettersAsAccessors>
                                <generateBuilders>true</generateBuilders>
                            </configOptions>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
            Build Helper - добавляет сгенерированные исходники в путь компиляции.
            Без этого плагина Maven не будет видеть сгенерированные классы.
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.build.directory}/generated-sources/openapi/src/main/java</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Стандартный компилятор Maven -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>

            <!--
            Resources Plugin - копирует ресурсы в выходной каталог.
            В нашем случае копирует сгенерированные исходники, чтобы они попали в JAR.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-generated-sources</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.outputDirectory}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.build.directory}/generated-sources/openapi/src/main/java</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
            JAR Plugin - создает JAR файл.
            Явно указываем включение .class файлов, чтобы избежать пустого JAR.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <includes>
                        <include>**/*.class</include>
                    </includes>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>