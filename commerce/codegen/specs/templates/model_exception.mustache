package {{package}};

import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.http.HttpStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.UUID;
import lombok.Getter;
import lombok.Setter;

{{#vendorExtensions.x-exception}}
{{#description}}
/**
* {{{description}}}
*/
{{/description}}
@Getter
@Setter
@Schema(name = "{{classname}}", description = "{{{description}}}")
{{#vendorExtensions.x-exception.httpStatus}}
@ResponseStatus(HttpStatus.{{vendorExtensions.x-exception.httpStatus}})
{{/vendorExtensions.x-exception.httpStatus}}
{{#vendorExtensions.x-exception.abstract}}
public abstract class {{classname}} extends RuntimeException {
{{/vendorExtensions.x-exception.abstract}}
{{^vendorExtensions.x-exception.abstract}}
public class {{classname}} extends {{#vendorExtensions.x-exception.parent}}{{{.}}}{{/vendorExtensions.x-exception.parent}}{{^vendorExtensions.x-exception.parent}}AbstractApiException{{/vendorExtensions.x-exception.parent}} {
{{/vendorExtensions.x-exception.abstract}}
    private static final long serialVersionUID = 1L;

    {{#vars}}
    {{#description}}
    /**
     * {{{description}}}
     */
    {{/description}}
    @Schema(name = "{{name}}", description = "{{{description}}}"{{#required}}, requiredMode = Schema.RequiredMode.REQUIRED{{/required}})
    {{#required}}
    @NotNull
    {{/required}}
    @JsonProperty("{{name}}")
    private {{{datatypeWithEnum}}} {{name}};

    {{/vars}}
    public {{classname}}(String message) {
        super(message);
    }

    public {{classname}}(String message, Throwable cause) {
        super(message, cause);
    }

    {{#vars}}
    public {{classname}} {{name}}({{{datatypeWithEnum}}} {{name}}) {
        this.{{name}} = {{name}};
        return this;
    }
    {{/vars}}
}
{{/vendorExtensions.x-exception}}
{{^vendorExtensions.x-exception}}
{{>model}}
{{/vendorExtensions.x-exception}}