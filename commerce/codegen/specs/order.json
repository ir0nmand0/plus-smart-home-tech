{
  "openapi": "3.0.1",
  "info": {
    "title": "Smart Home Technologies API",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost:41723",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "Обработка заказов",
      "description": "API для работы с заказами"
    }
  ],
  "paths": {
    "/api/v1/order": {
      "get": {
        "tags": [
          "Обработка заказов"
        ],
        "description": "Получить заказы пользователя.",
        "operationId": "getClientOrders",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Имя пользователя не должно быть пустым",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NotAuthorizedUserExceptionDto"
                }
              }
            }
          },
          "200": {
            "description": "Список всех заказов пользователя (Точка улучшения и развития - пагинированный вывод)",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "common-schemas.json#/components/schemas/OrderDto"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Обработка заказов"
        ],
        "description": "Создать новый заказ в системе.",
        "operationId": "createNewOrder",
        "requestBody": {
          "description": "Запрос на создание заказа.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNewOrderRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Нет заказываемого товара на складе",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NoSpecifiedProductInWarehouseExceptionDto"
                }
              }
            }
          },
          "200": {
            "description": "Оформленный заказ пользователя",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "common-schemas.json#/components/schemas/OrderDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/order/return": {
      "post": {
        "tags": [
          "Обработка заказов"
        ],
        "description": "Возврат заказа.",
        "operationId": "productReturn",
        "requestBody": {
          "description": "Запрос на возврат заказа.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductReturnRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Заказ пользователя после сборки",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "common-schemas.json#/components/schemas/OrderDto"
                }
              }
            }
          },
          "400": {
            "description": "Не найден заказ",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NoOrderFoundExceptionDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/order/payment": {
      "post": {
        "tags": [
          "Обработка заказов"
        ],
        "description": "Оплата заказа.",
        "operationId": "payment",
        "requestBody": {
          "description": "Идентификатор заказа.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Не найден заказ",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NoOrderFoundExceptionDto"
                }
              }
            }
          },
          "200": {
            "description": "Заказ пользователя после оплаты",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "common-schemas.json#/components/schemas/OrderDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/order/payment/failed": {
      "post": {
        "tags": [
          "Обработка заказов"
        ],
        "description": "Оплата заказа произошла с ошибкой.",
        "operationId": "paymentFailed",
        "requestBody": {
          "description": "Идентификатор заказа.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Заказ пользователя после ошибки оплаты",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "common-schemas.json#/components/schemas/OrderDto"
                }
              }
            }
          },
          "400": {
            "description": "Не найден заказ",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NoOrderFoundExceptionDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/order/delivery": {
      "post": {
        "tags": [
          "Обработка заказов"
        ],
        "description": "Доставка заказа.",
        "operationId": "delivery",
        "requestBody": {
          "description": "Идентификатор заказа.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Заказ пользователя после доставки",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "common-schemas.json#/components/schemas/OrderDto"
                }
              }
            }
          },
          "400": {
            "description": "Не найден заказ",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NoOrderFoundExceptionDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/order/delivery/failed": {
      "post": {
        "tags": [
          "Обработка заказов"
        ],
        "description": "Доставка заказа произошла с ошибкой.",
        "operationId": "deliveryFailed",
        "requestBody": {
          "description": "Идентификатор заказа.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Заказ пользователя после ошибки доставки",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "common-schemas.json#/components/schemas/OrderDto"
                }
              }
            }
          },
          "400": {
            "description": "Не найден заказ",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NoOrderFoundExceptionDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/order/completed": {
      "post": {
        "tags": [
          "Обработка заказов"
        ],
        "description": "Завершение заказа.",
        "operationId": "complete",
        "requestBody": {
          "description": "Идентификатор заказа.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Заказ пользователя после всех стадий и завершенный",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "common-schemas.json#/components/schemas/OrderDto"
                }
              }
            }
          },
          "400": {
            "description": "Не найден заказ",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NoOrderFoundExceptionDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/order/calculate/total": {
      "post": {
        "tags": [
          "Обработка заказов"
        ],
        "description": "Расчёт стоимости заказа.",
        "operationId": "calculateTotalCost",
        "requestBody": {
          "description": "Идентификатор заказа.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Не найден заказ",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NoOrderFoundExceptionDto"
                }
              }
            }
          },
          "200": {
            "description": "Заказ пользователя с расчётом общей стоимости",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "common-schemas.json#/components/schemas/OrderDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/order/calculate/delivery": {
      "post": {
        "tags": [
          "Обработка заказов"
        ],
        "description": "Расчёт стоимости доставки заказа.",
        "operationId": "calculateDeliveryCost",
        "requestBody": {
          "description": "Идентификатор заказа.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Заказ пользователя с расчётом доставки",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "common-schemas.json#/components/schemas/OrderDto"
                }
              }
            }
          },
          "400": {
            "description": "Не найден заказ",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NoOrderFoundExceptionDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/order/assembly": {
      "post": {
        "tags": [
          "Обработка заказов"
        ],
        "description": "Сборка заказа.",
        "operationId": "assembly",
        "requestBody": {
          "description": "Идентификатор заказа.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Заказ пользователя после сборки",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "common-schemas.json#/components/schemas/OrderDto"
                }
              }
            }
          },
          "400": {
            "description": "Не найден заказ",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NoOrderFoundExceptionDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/order/assembly/failed": {
      "post": {
        "tags": [
          "Обработка заказов"
        ],
        "description": "Сборка заказа произошла с ошибкой.",
        "operationId": "assemblyFailed",
        "requestBody": {
          "description": "Идентификатор заказа.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Заказ пользователя после ошибки сборки",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "common-schemas.json#/components/schemas/OrderDto"
                }
              }
            }
          },
          "400": {
            "description": "Не найден заказ",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/NoOrderFoundExceptionDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateNewOrderRequestDto": {
        "required": [
          "deliveryAddress",
          "shoppingCart"
        ],
        "type": "object",
        "properties": {
          "shoppingCart": {
            "$ref": "#/components/schemas/ShoppingCartDto"
          },
          "deliveryAddress": {
            "$ref": "common-schemas.json#/components/schemas/AddressDto"
          }
        }
      },
      "ShoppingCartDto": {
        "required": [
          "products",
          "shoppingCartId"
        ],
        "type": "object",
        "properties": {
          "shoppingCartId": {
            "type": "string",
            "description": "Идентификатор корзины в БД",
            "format": "uuid",
            "example": "53aa35c8-e659-44b2-882f-f6056e443c99"
          },
          "products": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "description": "Отображение идентификатора товара на отобранное количество.",
              "format": "int64"
            },
            "description": "Отображение идентификатора товара на отобранное количество."
          }
        },
        "description": "Корзина товаров в онлайн магазине."
      },
      "ProductReturnRequestDto": {
        "required": [
          "products"
        ],
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "format": "uuid"
          },
          "products": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "NoSpecifiedProductInWarehouseExceptionDto": {
        "type": "object",
        "properties": {
          "cause": {
            "type": "object",
            "properties": {
              "stackTrace": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "classLoaderName": { "type": "string" },
                    "moduleName": { "type": "string" },
                    "moduleVersion": { "type": "string" },
                    "methodName": { "type": "string" },
                    "fileName": { "type": "string" },
                    "lineNumber": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "className": { "type": "string" },
                    "nativeMethod": { "type": "boolean" }
                  }
                }
              },
              "message": { "type": "string" },
              "localizedMessage": { "type": "string" }
            }
          },
          "stackTrace": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "classLoaderName": { "type": "string" },
                "moduleName": { "type": "string" },
                "moduleVersion": { "type": "string" },
                "methodName": { "type": "string" },
                "fileName": { "type": "string" },
                "lineNumber": {
                  "type": "integer",
                  "format": "int32"
                },
                "className": { "type": "string" },
                "nativeMethod": { "type": "boolean" }
              }
            }
          },
          "httpStatus": {
            "$ref": "common-schemas.json#/components/schemas/HttpStatusEnum"
          },
          "userMessage": { "type": "string" },
          "message": { "type": "string" },
          "suppressed": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "stackTrace": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "classLoaderName": { "type": "string" },
                      "moduleName": { "type": "string" },
                      "moduleVersion": { "type": "string" },
                      "methodName": { "type": "string" },
                      "fileName": { "type": "string" },
                      "lineNumber": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "className": { "type": "string" },
                      "nativeMethod": { "type": "boolean" }
                    }
                  }
                },
                "message": { "type": "string" },
                "localizedMessage": { "type": "string" }
              }
            }
          },
          "localizedMessage": { "type": "string" }
        }
      },
      "NoOrderFoundExceptionDto": {
        "type": "object",
        "properties": {
          "cause": {
            "type": "object",
            "properties": {
              "stackTrace": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "classLoaderName": { "type": "string" },
                    "moduleName": { "type": "string" },
                    "moduleVersion": { "type": "string" },
                    "methodName": { "type": "string" },
                    "fileName": { "type": "string" },
                    "lineNumber": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "className": { "type": "string" },
                    "nativeMethod": { "type": "boolean" }
                  }
                }
              },
              "message": { "type": "string" },
              "localizedMessage": { "type": "string" }
            }
          },
          "stackTrace": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "classLoaderName": { "type": "string" },
                "moduleName": { "type": "string" },
                "moduleVersion": { "type": "string" },
                "methodName": { "type": "string" },
                "fileName": { "type": "string" },
                "lineNumber": {
                  "type": "integer",
                  "format": "int32"
                },
                "className": { "type": "string" },
                "nativeMethod": { "type": "boolean" }
              }
            }
          },
          "httpStatus": {
            "$ref": "common-schemas.json#/components/schemas/HttpStatusEnum"
          },
          "userMessage": { "type": "string" },
          "message": { "type": "string" },
          "suppressed": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "stackTrace": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "classLoaderName": { "type": "string" },
                      "moduleName": { "type": "string" },
                      "moduleVersion": { "type": "string" },
                      "methodName": { "type": "string" },
                      "fileName": { "type": "string" },
                      "lineNumber": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "className": { "type": "string" },
                      "nativeMethod": { "type": "boolean" }
                    }
                  }
                },
                "message": { "type": "string" },
                "localizedMessage": { "type": "string" }
              }
            }
          },
          "localizedMessage": { "type": "string" }
        }
      },
      "NotAuthorizedUserExceptionDto": {
        "type": "object",
        "properties": {
          "cause": {
            "type": "object",
            "properties": {
              "stackTrace": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "classLoaderName": { "type": "string" },
                    "moduleName": { "type": "string" },
                    "moduleVersion": { "type": "string" },
                    "methodName": { "type": "string" },
                    "fileName": { "type": "string" },
                    "lineNumber": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "className": { "type": "string" },
                    "nativeMethod": { "type": "boolean" }
                  }
                }
              },
              "message": { "type": "string" },
              "localizedMessage": { "type": "string" }
            }
          },
          "stackTrace": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "classLoaderName": { "type": "string" },
                "moduleName": { "type": "string" },
                "moduleVersion": { "type": "string" },
                "methodName": { "type": "string" },
                "fileName": { "type": "string" },
                "lineNumber": {
                  "type": "integer",
                  "format": "int32"
                },
                "className": { "type": "string" },
                "nativeMethod": { "type": "boolean" }
              }
            }
          },
          "httpStatus": {
            "$ref": "common-schemas.json#/components/schemas/HttpStatusEnum"
          },
          "userMessage": { "type": "string" },
          "message": { "type": "string" },
          "suppressed": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "stackTrace": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "classLoaderName": { "type": "string" },
                      "moduleName": { "type": "string" },
                      "moduleVersion": { "type": "string" },
                      "methodName": { "type": "string" },
                      "fileName": { "type": "string" },
                      "lineNumber": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "className": { "type": "string" },
                      "nativeMethod": { "type": "boolean" }
                    }
                  }
                },
                "message": { "type": "string" },
                "localizedMessage": { "type": "string" }
              }
            }
          },
          "localizedMessage": { "type": "string" }
        }
      }
    }
  }
}
