@namespace("ru.yandex.practicum.kafka.telemetry.event")
protocol HubEventProtocol {

	// UNRECOGNIZED - автоматически добавленное значение в Protobuf для обработки неизвестных данных,
	// добавлено в AVRO-схему для упрощения маппинга.

	/**
	 * Список типов устройств, которые поддерживаются в хабе.
	 */
	enum DeviceTypeAvro {
		MOTION_SENSOR,      // Датчик движения.
		TEMPERATURE_SENSOR, // Датчик температуры.
		LIGHT_SENSOR,       // Датчик освещенности.
		CLIMATE_SENSOR,     // Датчик климата (например, CO2, влажность).
		SWITCH_SENSOR,      // Датчик переключателя (например, состояния ВКЛ/ВЫКЛ).
		UNRECOGNIZED        // Неопознанное значение.
	}

	/**
	 * Список типов условий для активации сценария.
	 */
	enum ConditionTypeAvro {
		MOTION,     // Условие на основе движения.
		LUMINOSITY, // Условие на основе освещенности.
		SWITCH,     // Условие на основе состояния переключателя.
		TEMPERATURE,// Условие на основе температуры.
		CO2LEVEL,   // Условие на основе уровня CO2.
		HUMIDITY,   // Условие на основе влажности.
		UNRECOGNIZED // Неопознанное значение.
	}

	/**
	 * Список операций для проверки условий сценария.
	 */
	enum ConditionOperationAvro {
		EQUALS,        // Равно.
		GREATER_THAN,  // Больше.
		LOWER_THAN,    // Меньше.
		UNRECOGNIZED   // Неопознанное значение.
	}

	/**
	 * Список действий, которые могут выполнять устройства.
	 */
	enum ActionTypeAvro {
		ACTIVATE,   // Включить устройство.
		DEACTIVATE, // Выключить устройство.
		INVERSE,    // Инвертировать состояние устройства.
		SET_VALUE,  // Установить определенное значение.
		UNRECOGNIZED // Неопознанное значение.
	}

	/**
	 * Событие добавления устройства в хаб.
	 */
	record DeviceAddedEventAvro {
		string id; // Уникальный идентификатор устройства.
		DeviceTypeAvro type; // Тип устройства.
	}

	/**
	 * Событие удаления устройства из хаба.
	 */
	record DeviceRemovedEventAvro {
		string id; // Уникальный идентификатор устройства.
	}

	/**
	 * Условие для активации сценария.
	 * Включает ID сенсора, тип условия, операцию и необязательное значение.
	 */
	record ScenarioConditionAvro {
		string sensor_id; // Уникальный идентификатор сенсора.
		ConditionTypeAvro type; // Тип условия.
		ConditionOperationAvro operation; // Операция, применяемая к условию.
		union {null, int, boolean} value = null; // Значение для проверки (опционально).
	}

	/**
	 * Действие, выполняемое устройством в рамках сценария.
	 * Включает ID сенсора, тип действия и необязательное значение.
	 */
	record DeviceActionAvro {
		string sensor_id; // Уникальный идентификатор сенсора.
		ActionTypeAvro type; // Тип действия.
		int? value = null; // Значение для выполнения действия (опционально).
	}

	/**
	 * Событие добавления сценария в хаб.
	 * Включает название сценария, список условий и действий.
	 */
	record ScenarioAddedEventAvro {
		string name; // Уникальное название сценария.
		array<ScenarioConditionAvro> conditions; // Список условий для активации сценария.
		array<DeviceActionAvro> actions; // Список действий, выполняемых при активации сценария.
	}

	/**
	 * Событие удаления сценария из хаба.
	 */
	record ScenarioRemovedEventAvro {
		string name; // Название удаляемого сценария.
	}

	/**
	 * Общая структура события хаба.
	 * Содержит ID хаба, временную метку и полезную нагрузку.
	 */
	record HubEventAvro {
		string hub_id; // Уникальный идентификатор хаба.
		timestamp_ms timestamp; // Временная метка события.
		union {
			DeviceAddedEventAvro,
			DeviceRemovedEventAvro,
			ScenarioAddedEventAvro,
			ScenarioRemovedEventAvro
		} payload; // Полезная нагрузка, специфичная для события.
	}
}
